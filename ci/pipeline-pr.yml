---
resource_types:
  # This is a community-provided (non-concourse) resource which allows interacting with GitHub Pull Requests (PRs)
  - name: git-source
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

resources:
  # # These are PRs against the git repo the source code is found in
  - name: git-source
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook-token))
    source:
      repository: funkypenguin/phippyandfriends
      access_token: ((github-access-token))

  # This is the container registry we'll be using
  - name: harbour
    type: registry-image
    icon: pier-crane
    source:
      username: ((registry-username))
      password: ((registry-password))
      debug: false
      repository: ((registry-url))/((component))

jobs:
  - name: launch-((component))
    public: true
    plan:

      # Get the pull request
      - get: git-source
        trigger: true

      # Respond to the PR indicating the pipeline is pending
      - put: git-source
        params:
          path: git-source
          status: pending

      # This generic task takes a param "component", and builds the dockerfile found in the <git-source>/<component> directory.
      - task: build-image
        file: git-source/ci/tasks/build-with-kaniko.yml
        vars: { component: ((component)) }

      # This task uploads the image generated above into the registry, tagging with the commit sha of the container
      - put: harbour
        params:
          image: image/image.tar
          additional_tags: git-source/.git/ref

      # This task runs "helm lint" against the helm chart found in <git-source>/<component>/charts/<component> directory.
      - task: helm lint chart
        file: git-source/ci/tasks/helm-lint.yml      
        vars: { component: ((component)) }

      # This task runs "helm unittest" against the helm chart found in <git-source>/<component>/charts/<component> directory.
      - task: helm unittest chart
        file: git-source/ci/tasks/helm-unittest.yml      
        vars: { component: ((component)) }

      # This task uses helm to generate kubernetes manifests from the supplied chart and values
      - task: create manifests from chart
        file: git-source/ci/tasks/create-kube-manifests.yml
        vars: 
          component: ((component))
          registry-url: ((registry-url))
          ingress-class: ((ingress-class))
          basedomain: ((basedomain))

      # This task runs "kubeval" against the generated manifests to ensure they're syntatically correct before applying to cluster
      - task: kubeval manifests
        file: git-source/ci/tasks/kubeval-manifests.yml

      - put: git-source
        params:
          path: git-source
          status: success
